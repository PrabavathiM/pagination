If you want to **store repeat files** but **rename them using the current time** (so each upload is saved without overwriting), then yes ‚Äî you can add the current time to the filename before saving it.

---

### ‚úÖ Example: Rename file using time (to prevent overwrite)

```php
date_default_timezone_set("Asia/Kolkata");

$filename = $_FILES["uploadfile"]["name"];
$filetype = $_FILES["uploadfile"]["type"];
$filetemp  = $_FILES["uploadfile"]["tmp_name"];
$fileext = pathinfo($filename, PATHINFO_EXTENSION);
$uploadtime = date("Ymd_His");  // format: 20250604_143512 (Ymd_His)

$newfilename = pathinfo($filename, PATHINFO_FILENAME) . "_" . $uploadtime . "." . $fileext;

$uploaddir = "uploads/";
$targetfile = $uploaddir . $newfilename;
```

Then save the file:

```php
if (move_uploaded_file($filetemp, $targetfile)) {
    echo "File uploaded as: $newfilename";
} else {
    echo "Upload failed.";
}
```

---

### üí° Output:

If you upload `resume.pdf` at 2:35:12 PM on June 4, 2025:

```
File saved as: resume_20250604_143512.pdf
```

No overwrite. Each upload is stored uniquely.

---

Do you also want to save the filename and upload time in a MySQL table?
If you want to **store repeat files** but **rename them using the current time** (so each upload is saved without overwriting), then yes ‚Äî you can add the current time to the filename before saving it.

---

### ‚úÖ Example: Rename file using time (to prevent overwrite)

```php
date_default_timezone_set("Asia/Kolkata");

$filename = $_FILES["uploadfile"]["name"];
$filetype = $_FILES["uploadfile"]["type"];
$filetemp  = $_FILES["uploadfile"]["tmp_name"];
$fileext = pathinfo($filename, PATHINFO_EXTENSION);
$uploadtime = date("Ymd_His");  // format: 20250604_143512 (Ymd_His)

$newfilename = pathinfo($filename, PATHINFO_FILENAME) . "_" . $uploadtime . "." . $fileext;

$uploaddir = "uploads/";
$targetfile = $uploaddir . $newfilename;
```

Then save the file:

```php
if (move_uploaded_file($filetemp, $targetfile)) {
    echo "File uploaded as: $newfilename";
} else {
    echo "Upload failed.";
}
```

---

### üí° Output:

If you upload `resume.pdf` at 2:35:12 PM on June 4, 2025:

```
File saved as: resume_20250604_143512.pdf
```

No overwrite. Each upload is stored uniquely.

---

Do you also want to save the filename and upload time in a MySQL table?
If you want to **store repeat files** but **rename them using the current time** (so each upload is saved without overwriting), then yes ‚Äî you can add the current time to the filename before saving it.

---

### ‚úÖ Example: Rename file using time (to prevent overwrite)

```php
date_default_timezone_set("Asia/Kolkata");

$filename = $_FILES["uploadfile"]["name"];
$filetype = $_FILES["uploadfile"]["type"];
$filetemp  = $_FILES["uploadfile"]["tmp_name"];
$fileext = pathinfo($filename, PATHINFO_EXTENSION);
$uploadtime = date("Ymd_His");  // format: 20250604_143512 (Ymd_His)

$newfilename = pathinfo($filename, PATHINFO_FILENAME) . "_" . $uploadtime . "." . $fileext;

$uploaddir = "uploads/";
$targetfile = $uploaddir . $newfilename;
```

Then save the file:

```php
if (move_uploaded_file($filetemp, $targetfile)) {
    echo "File uploaded as: $newfilename";
} else {
    echo "Upload failed.";
}
```

---

### üí° Output:

If you upload `resume.pdf` at 2:35:12 PM on June 4, 2025:

```
File saved as: resume_20250604_143512.pdf
```

No overwrite. Each upload is stored uniquely.

---

Do you also want to save the filename and upload time in a MySQL table?
If you want to **store repeat files** but **rename them using the current time** (so each upload is saved without overwriting), then yes ‚Äî you can add the current time to the filename before saving it.

---

### ‚úÖ Example: Rename file using time (to prevent overwrite)

```php
date_default_timezone_set("Asia/Kolkata");

$filename = $_FILES["uploadfile"]["name"];
$filetype = $_FILES["uploadfile"]["type"];
$filetemp  = $_FILES["uploadfile"]["tmp_name"];
$fileext = pathinfo($filename, PATHINFO_EXTENSION);
$uploadtime = date("Ymd_His");  // format: 20250604_143512 (Ymd_His)

$newfilename = pathinfo($filename, PATHINFO_FILENAME) . "_" . $uploadtime . "." . $fileext;

$uploaddir = "uploads/";
$targetfile = $uploaddir . $newfilename;
```

Then save the file:

```php
if (move_uploaded_file($filetemp, $targetfile)) {
    echo "File uploaded as: $newfilename";
} else {
    echo "Upload failed.";
}
```

---

### üí° Output:

If you upload `resume.pdf` at 2:35:12 PM on June 4, 2025:

```
File saved as: resume_20250604_143512.pdf
```

No overwrite. Each upload is stored uniquely.

---

Do you also want to save the filename and upload time in a MySQL table?
In PHP, you can get the **file size** using the `filesize()` function.

---

### ‚úÖ **1. Get file size in bytes**

```php
<?php
$size = filesize("example.txt");  // path to your file
echo $size . " bytes";
?>
```

---

### ‚úÖ **2. Convert file size to KB, MB, etc.**

```php
<?php
$size = filesize("example.txt"); // size in bytes

if ($size >= 1048576) {
    echo round($size / 1048576, 2) . " MB";
} elseif ($size >= 1024) {
    echo round($size / 1024, 2) . " KB";
} else {
    echo $size . " bytes";
}
?>
```

---

### ‚úÖ **3. Get uploaded file size from form**

```php
<?php
if (isset($_FILES["myfile"])) {
    $size = $_FILES["myfile"]["size"];
    echo "File size: " . $size . " bytes";
}
?>
```

---

### ‚ÑπÔ∏è Notes:

* `filesize()` only works if the file exists on disk.
* `$_FILES["myfile"]["size"]` gives size of file uploaded through a form.

Want the size in GB or automatically formatted string? I can help with that too.
In PHP, you can get the **file size** using the `filesize()` function.

---

### ‚úÖ **1. Get file size in bytes**

```php
<?php
$size = filesize("example.txt");  // path to your file
echo $size . " bytes";
?>
```

---

### ‚úÖ **2. Convert file size to KB, MB, etc.**

```php
<?php
$size = filesize("example.txt"); // size in bytes

if ($size >= 1048576) {
    echo round($size / 1048576, 2) . " MB";
} elseif ($size >= 1024) {
    echo round($size / 1024, 2) . " KB";
} else {
    echo $size . " bytes";
}
?>
```

---

### ‚úÖ **3. Get uploaded file size from form**

```php
<?php
if (isset($_FILES["myfile"])) {
    $size = $_FILES["myfile"]["size"];
    echo "File size: " . $size . " bytes";
}
?>
```

---

### ‚ÑπÔ∏è Notes:

* `filesize()` only works if the file exists on disk.
* `$_FILES["myfile"]["size"]` gives size of file uploaded through a form.

Want the size in GB or automatically formatted string? I can help with that too.
In PHP, you can get the **file size** using the `filesize()` function.

---

### ‚úÖ **1. Get file size in bytes**

```php
<?php
$size = filesize("example.txt");  // path to your file
echo $size . " bytes";
?>
```

---

### ‚úÖ **2. Convert file size to KB, MB, etc.**

```php
<?php
$size = filesize("example.txt"); // size in bytes

if ($size >= 1048576) {
    echo round($size / 1048576, 2) . " MB";
} elseif ($size >= 1024) {
    echo round($size / 1024, 2) . " KB";
} else {
    echo $size . " bytes";
}
?>
```

---

### ‚úÖ **3. Get uploaded file size from form**

```php
<?php
if (isset($_FILES["myfile"])) {
    $size = $_FILES["myfile"]["size"];
    echo "File size: " . $size . " bytes";
}
?>
```

---

### ‚ÑπÔ∏è Notes:

* `filesize()` only works if the file exists on disk.
* `$_FILES["myfile"]["size"]` gives size of file uploaded through a form.

Want the size in GB or automatically formatted string? I can help with that too.
In PHP, you can get the **file size** using the `filesize()` function.

---

### ‚úÖ **1. Get file size in bytes**

```php
<?php
$size = filesize("example.txt");  // path to your file
echo $size . " bytes";
?>
```

---

### ‚úÖ **2. Convert file size to KB, MB, etc.**

```php
<?php
$size = filesize("example.txt"); // size in bytes

if ($size >= 1048576) {
    echo round($size / 1048576, 2) . " MB";
} elseif ($size >= 1024) {
    echo round($size / 1024, 2) . " KB";
} else {
    echo $size . " bytes";
}
?>
```

---

### ‚úÖ **3. Get uploaded file size from form**

```php
<?php
if (isset($_FILES["myfile"])) {
    $size = $_FILES["myfile"]["size"];
    echo "File size: " . $size . " bytes";
}
?>
```

---

### ‚ÑπÔ∏è Notes:

* `filesize()` only works if the file exists on disk.
* `$_FILES["myfile"]["size"]` gives size of file uploaded through a form.

Want the size in GB or automatically formatted string? I can help with that too.
In PHP, you can get the **file size** using the `filesize()` function.

---

### ‚úÖ **1. Get file size in bytes**

```php
<?php
$size = filesize("example.txt");  // path to your file
echo $size . " bytes";
?>
```

---

### ‚úÖ **2. Convert file size to KB, MB, etc.**

```php
<?php
$size = filesize("example.txt"); // size in bytes

if ($size >= 1048576) {
    echo round($size / 1048576, 2) . " MB";
} elseif ($size >= 1024) {
    echo round($size / 1024, 2) . " KB";
} else {
    echo $size . " bytes";
}
?>
```

---

### ‚úÖ **3. Get uploaded file size from form**

```php
<?php
if (isset($_FILES["myfile"])) {
    $size = $_FILES["myfile"]["size"];
    echo "File size: " . $size . " bytes";
}
?>
```

---

### ‚ÑπÔ∏è Notes:

* `filesize()` only works if the file exists on disk.
* `$_FILES["myfile"]["size"]` gives size of file uploaded through a form.

Want the size in GB or automatically formatted string? I can help with that too.
In PHP, you can get the **file size** using the `filesize()` function.

---

### ‚úÖ **1. Get file size in bytes**

```php
<?php
$size = filesize("example.txt");  // path to your file
echo $size . " bytes";
?>
```

---

### ‚úÖ **2. Convert file size to KB, MB, etc.**

```php
<?php
$size = filesize("example.txt"); // size in bytes

if ($size >= 1048576) {
    echo round($size / 1048576, 2) . " MB";
} elseif ($size >= 1024) {
    echo round($size / 1024, 2) . " KB";
} else {
    echo $size . " bytes";
}
?>
```

---

### ‚úÖ **3. Get uploaded file size from form**

```php
<?php
if (isset($_FILES["myfile"])) {
    $size = $_FILES["myfile"]["size"];
    echo "File size: " . $size . " bytes";
}
?>
```

---

### ‚ÑπÔ∏è Notes:

* `filesize()` only works if the file exists on disk.
* `$_FILES["myfile"]["size"]` gives size of file uploaded through a form.

Want the size in GB or automatically formatted string? I can help with that too.
